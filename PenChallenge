#####################################################
##              Align Depth to Color               ##
#####################################################

# First import the library for intel realsense sensor
from gettext import ngettext
import pyrealsense2 as rs
# Import Numpy for easy array manipulation
import numpy as np
# Import OpenCV for easy image rendering
import cv2 as cv
# For trackbar
import argparse










"""                                                      """
"""                       Realsense                      """
"""                                                      """



# Create a pipeline - Feeds realsense data from camera to code
pipeline = rs.pipeline()

# Create a config and configure the pipeline to stream
#  different resolutions of color and depth streams
config = rs.config()

# Get device product line for setting a supporting resolution
pipeline_wrapper = rs.pipeline_wrapper(pipeline)
pipeline_profile = config.resolve(pipeline_wrapper)
device = pipeline_profile.get_device()
device_product_line = str(device.get_info(rs.camera_info.product_line))

# Check if RGB sensor stream is detected
found_rgb = False
for s in device.sensors:
    if s.get_info(rs.camera_info.name) == 'RGB Camera':
        found_rgb = True
        break
if not found_rgb:
    print("The demo requires Depth camera with Color sensor")
    exit(0)

config.enable_stream(rs.stream.depth, 640, 480, rs.format.z16, 30) # Configure depth

if device_product_line == 'L500':
    config.enable_stream(rs.stream.color, 960, 540, rs.format.bgr8, 30)
else:
    config.enable_stream(rs.stream.color, 640, 480, rs.format.bgr8, 30)# Configure RGB 

# Start streaming - with specified configuration
profile = pipeline.start(config)

# Getting the depth sensor's depth scale (see rs-align example for explanation)
depth_sensor = profile.get_device().first_depth_sensor()
depth_scale = depth_sensor.get_depth_scale()
print("Depth Scale is: " , depth_scale)

# We will be removing the background of objects more than
#  clipping_distance_in_meters meters away
clipping_distance_in_meters = 0.4 # 1 = 1 meter
clipping_distance = clipping_distance_in_meters / depth_scale # Calculates distance for camera

# Create an align object
# rs.align allows us to perform alignment of depth frames to others frames
# The "align_to" is the stream type to which we plan to align depth frames.
align_to = rs.stream.color
align = rs.align(align_to)













"""                                                      """
"""                   OpenCV Trackbar                    """
"""                                                      """
"""
max_value = 255
max_value_H = 360//2
low_H = 0
low_S = 0
low_V = 0
high_H = max_value_H
high_S = max_value
high_V = max_value
window_capture_name = 'Video Capture'
window_detection_name = 'Object Detection'
low_H_name = 'Low H'
low_S_name = 'Low S'
low_V_name = 'Low V'
high_H_name = 'High H'
high_S_name = 'High S'
high_V_name = 'High V'



# For a trackbar which controls the lower range, say for example hue value:
def on_low_H_thresh_trackbar(val):
    global low_H
    global high_H
    low_H = val
    low_H = min(high_H-1, low_H)
    cv.setTrackbarPos(low_H_name, window_detection_name, low_H)

# For a trackbar which controls the upper range, say for example hue value:
def on_high_H_thresh_trackbar(val):
    global low_H
    global high_H
    high_H = val
    high_H = max(high_H, low_H+1)
    cv.setTrackbarPos(high_H_name, window_detection_name, high_H)

def on_low_S_thresh_trackbar(val):
    global low_S
    global high_S
    low_S = val
    low_S = min(high_S-1, low_S)
    cv.setTrackbarPos(low_S_name, window_detection_name, low_S)

def on_high_S_thresh_trackbar(val):
    global low_S
    global high_S
    high_S = val
    high_S = max(high_S, low_S+1)
    cv.setTrackbarPos(high_S_name, window_detection_name, high_S)

def on_low_V_thresh_trackbar(val):
    global low_V
    global high_V
    low_V = val
    low_V = min(high_V-1, low_V)
    cv.setTrackbarPos(low_V_name, window_detection_name, low_V)

def on_high_V_thresh_trackbar(val):
    global low_V
    global high_V
    high_V = val
    high_V = max(high_V, low_V+1)
    cv.setTrackbarPos(high_V_name, window_detection_name, high_V)


"""










"""                                                      """
"""                    Streaming Loop                    """
"""                                                      """

# Streaming loop
try:
    while True:
        # Get frameset of color and depth
        frames = pipeline.wait_for_frames()
        # frames.get_depth_frame() is a 640x360 depth image

        # Align the depth frame to color frame
        aligned_frames = align.process(frames)

        # Get aligned frames
        aligned_depth_frame = aligned_frames.get_depth_frame() # aligned_depth_frame is a 640x480 depth image
        color_frame = aligned_frames.get_color_frame()

        # Validate that both frames are valid
        if not aligned_depth_frame or not color_frame:
            continue

        depth_image = np.asanyarray(aligned_depth_frame.get_data())
        color_image = np.asanyarray(color_frame.get_data())

        # Remove background - Set pixels further than clipping_distance to grey
        grey_color = 153
        depth_image_3d = np.dstack((depth_image,depth_image,depth_image)) #depth image is 1 channel, color is 3 channels
        bg_removed = np.where((depth_image_3d > clipping_distance) | (depth_image_3d <= 0), grey_color, color_image)








        """                             """
        """     Changing color space    """
        """                             """
        # #while(1):
        # # Take each frame
        # #_, frame = cap.read()
        # # Convert BGR to HSV
        # #hsv = cv.cvtColor(frame, cv.COLOR_BGR2HSV)
        hsv = cv.cvtColor(bg_removed, cv.COLOR_BGR2HSV)
        # # define range of blue color in HSV
        lower_purple = np.array([120,50,50])
        upper_purple = np.array([140,255,255])
        # # Threshold the HSV image to get only blue colors
        mask = cv.inRange(hsv, lower_purple, upper_purple)
        # # Bitwise-AND mask and original image
        res = cv.bitwise_and(color_image, color_image, mask= mask) # This combines the grey mask and the original image



        
        #res = cv.bitwise_and(bg_removed, bg_removed, mask= mask)  # David

        imgray = cv.cvtColor(res, cv.COLOR_BGR2GRAY)
        ret, thresh = cv.threshold(imgray, 20, 255, 0)
        contours, hierarchy = cv.findContours(thresh, cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)
        if len(contours) != 0: # do not shwo contours or middle point if the pen is not spotted good enough - (WAS != 0)
            maxcontour = max(contours, key = cv.contourArea)
            if len(maxcontour) > 15:
                cv.drawContours(res, maxcontour, -1, (0,255,0), 3)
                cv.drawContours(bg_removed, maxcontour, -1, (0,255,0), 3)
                M = cv.moments(maxcontour)
                cx = int(M['m10']/M['m00'])
                cy = int(M['m01']/M['m00'])
               # print(cx, cy)
                res = cv.circle(res, (cx,cy), radius=10, color=(0, 0, 255), thickness=-1)
                bg_removed = cv.circle(bg_removed, (cx,cy), radius=10, color=(0, 0, 255), thickness=-1)



                if cx < 480 and cy < 480 and depth_image[cx][cy] < 1000:
                    # get depth using x,y coordinates value in the depth matrix
                    profile_stream = profile.get_stream(rs.stream.color)
                    intr = profile_stream.as_video_stream_profile().get_intrinsics()
                    depth_coords = rs.rs2_deproject_pixel_to_point(intr, [cx,cy], depth_image[cx][cy])

                    if depth_coords != [0.0,0.0,0.0]:
                        print(depth_coords)
                        print(cx, cy)

        




        """
        # #cv.imshow('frame',color_image)
        cv.imshow('bg_removed',bg_removed)
        cv.imshow('mask',mask)
        cv.imshow('blackandwhite', thresh)
        cv.imshow('res',res)
        # #k = cv.waitKey(5) & 0xFF
        # #if k == 27:
        # #    break
        # #cv.destroyAllWindows()
        """




        """
        # parser = argparse.ArgumentParser(description='Code for Thresholding Operations using inRange tutorial.')
        # parser.add_argument('--camera', help='Camera divide number.', default=0, type=int)
        # args = parser.parse_args()

        # # Capture the video stream from default or supplied capturing device.
        # #cap = cv.VideoCapture(args.camera)

        # # Create a window to display the default frame and the threshold frame.
        cv.namedWindow(window_capture_name)
        cv.namedWindow(window_detection_name)

        # # Create the trackbars to set the range of HSV values
        cv.createTrackbar(low_H_name, window_detection_name , low_H, max_value_H, on_low_H_thresh_trackbar)
        cv.createTrackbar(high_H_name, window_detection_name , high_H, max_value_H, on_high_H_thresh_trackbar)
        cv.createTrackbar(low_S_name, window_detection_name , low_S, max_value, on_low_S_thresh_trackbar)
        cv.createTrackbar(high_S_name, window_detection_name , high_S, max_value, on_high_S_thresh_trackbar)
        cv.createTrackbar(low_V_name, window_detection_name , low_V, max_value, on_low_V_thresh_trackbar)
        cv.createTrackbar(high_V_name, window_detection_name , high_V, max_value, on_high_V_thresh_trackbar)

        # # while True:
            
        # #     ret, frame = cap.read()
        # #     if frame is None:
        # #         break

        # #frame_HSV = cv.cvtColor(frame, cv.COLOR_BGR2HSV)
        frame_HSV = cv.cvtColor(color_image, cv.COLOR_BGR2HSV)
        rame_threshold = cv.inRange(frame_HSV, (low_H, low_S, low_V), (high_H, high_S, high_V))
            
        # # Show the images
        # #cv.imshow(window_capture_name, frame)
        # cv.imshow(window_capture_name, color_image)
        # cv.imshow(window_detection_name, frame_threshold)
            
        #     # key = cv.waitKey(30)
        #     # if key == ord('q') or key == 27:
        #     #     break
        """













        """                             """
        """         Render Images       """
        """                             """
        #   depth align to color on left
        #   depth on right
        depth_colormap = cv.applyColorMap(cv.convertScaleAbs(depth_image, alpha=0.03), cv.COLORMAP_JET)
        images = np.hstack((color_image, depth_colormap))

        cv.namedWindow('Align Example', cv.WINDOW_NORMAL)
        cv.imshow('Align Example', images)


        images2 = np.hstack((bg_removed, res))
        images3 = np.hstack((mask, thresh))
        cv.namedWindow('bg_removed & mask', cv.WINDOW_NORMAL)
        cv.imshow('bg_removed & mask', images2)
        cv.namedWindow('thresh & res', cv.WINDOW_NORMAL)
        cv.imshow('thresh & res', images3)



        key = cv.waitKey(1)
        # Press esc or 'q' to close the image window
        if key & 0xFF == ord('q') or key == 27:
            cv.destroyAllWindows()
            break
finally:
    pipeline.stop()